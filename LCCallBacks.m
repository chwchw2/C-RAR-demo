
function a = LCCallBacks(str)
%Example event handlers for some of the events generated by a LabChart document.
a = str2func(str);

function OnBlockStart(varargin)
%Example event handler called when sampling and a new block is about to be
%added to the document. This is called *before* the new block has been
%added, so gLCDoc.NumberOfRecords does not yet include the new block.
%Initialise the global variables used by OnNewSamples().
global gLCDoc;
global gLatestBlock;
global gBlockSecsPerTick;
global gLatestTickInBlock;
global gChans;
global gChansData;
global gT;
global amp;
global emg;
global threshold;
disp('OnBlockStart called')
stim(-1)
gLatestBlock = gLCDoc.NumberOfRecords
gBlockSecsPerTick = gLCDoc.GetRecordSecsPerTick(gLatestBlock)
gNChanSamples = 0;
gT = [];   %time (from start of block)
gLatestTickInBlock = 0;

%gChansData is a cell array because LabChart channels are not necessarily all the same
%length while sampling, since the data can arrive in each channel with
%different delays.
numSlots = length(gChans);
gChansData = cell(numSlots); 

function OnNewSamples(varargin)
doOnNewSamples(double(varargin{3}));

function OnBlockFinish(varargin)
global gLCDoc;
global gLatestBlock;
global gBlockSecsPerTick;
global gLatestTickInBlock;
global gChans;
global gChansData;
global gT;
disp('OnBlockFinish called')
stim(-2)
%This would be a good place to save the gChansData and gT for the completed
%block, if needed.

function OnSelectionChange(varargin)
%Example event handler. Called when the selection changes in the LabChart
%document.
%This example gets the selected data as a (2D) matrix with each column
%corresponding to a channel and each row corresponding to a time point.
global gLCDoc;
disp('OnSelectionChange called')
kArrayOfDoubles = 1;  % GetSelectedData returns a matrix of doubles, not variants (cells)
kAllSelectedChannels = -1; % GetSelectedData returns all selected channels, rather just the specified channel.
data = gLCDoc.GetSelectedData(kArrayOfDoubles, kAllSelectedChannels);
subplot(1,1,1); %no subplots
plot(data)







